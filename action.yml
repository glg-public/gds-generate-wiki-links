name: "Generate Wiki Links"
description: "Generates a directory of services in the cluster in the repo's wiki"
inputs:
  gds_repo:
    description: "The Central GDS Cluster Directory repo, in org/repo format. e.g. glg/gds"
    required: true
  git_username:
    description: "git username to identify commits"
    required: true
  git_email:
    description: "email address for the git user to make commits with"
    required: true
runs:
  using: "composite"
  steps:
  - name: Generate Wiki Links
    shell: bash
    run: |
      pushd ./code > /dev/null
      GITHUB_REMOTE="${{github.event.repository.ssh_url}}"
      GITHUB_WIKI_REMOTE=$(echo "${GITHUB_REMOTE}" | perl -pe 's|\.git$|\.wiki\.git|')
      WIKI_DIR="../wiki"
      WIKI_HOME_PAGE="$WIKI_DIR/Home.md"
      GITHUB_GDS_REMOTE="git@github.com:${{inputs.gds_repo}}.git"
      GDS_DIR="../gds"

      CLUSTER_NAME=$(echo "${{github.repository}}" | perl -pe 's|glg/gds.china.clusterconfig.||')
      CLUSTER_VERSION=$(curl -s 'https://static.glginc.cn/gds-china-cluster-map/cluster-map.json' | jq -r ".${CLUSTER_NAME}.clusterVersion")

      [ ! -d "${WIKI_DIR}" ] && git clone "${GITHUB_WIKI_REMOTE}" "${WIKI_DIR}"
      [ ! -d "${GDS_DIR}" ] && git clone "${GITHUB_GDS_REMOTE}" "${GDS_DIR}"

      ECS_CLUSTER_CONSOLE_URL="https://console.amazonaws.cn//ecs/home?region=cn-north-1#/clusters/${CLUSTER_VERSION}-${CLUSTER_NAME}/services"
      CLUSTER_SUMO_DASHBOARD_URL="https://glgroup.sumologic.com/ui/#/dashboardv2/9qLxrGlVgzUOLOBjBNPBzHVfx7YXviJDUGVsMPQ7sbBQQjlg7EGxxmntThda?variables=cluster:${CLUSTER_NAME};service:*;region:*"
      CLUSTER_CONFIG_CODEPIPELINE_URL="https://console.aws.amazon.com/codesuite/codepipeline/pipelines/${CLUSTER_VERSION}-${CLUSTER_NAME}-ccwatcher/view?region=ap-northeast-1"
      tee "$WIKI_HOME_PAGE" <<EOF
      ### Cluster Links
      | Dashboard | Description |
      | --- | --- |
      | [Cluster Config Watcher](${CLUSTER_CONFIG_CODEPIPELINE_URL}) | This will take you to the AWS Codepipeline responsible for processing this Cluster Config. If changes to the environment do not seem to go out we might start looking here. |
      | [ECS Cluster](${ECS_CLUSTER_CONSOLE_URL}) | This takes you directly to the AWS ECS Cluster Dashboard |
      | [Sumo Cluster Dashboard](${CLUSTER_SUMO_DASHBOARD_URL}) | This a Sumo Logic log dashboard where you can view lots of information about this cluster. You can drill into each service using filters. |
      | [Cluster Config Repo](https://github.com/${{github.repository}}) | The Cluster Config repo on GitHub |
      EOF
      PUBLISHED_SERVICES=()
      # Generate the links and table row for each service
      for orders_file in $(find . -maxdepth 2 -type f -name "orders" | sort); do
        unset SERVICE
        unset SERVICE_DIR_URL
        unset HEALTHCHECK_URL
        unset SERVICE_SUMO_DASHBOARD_URL
        unset SERVICE_BUILD_LOGS_URL
        unset SERVICE_ECS_CONSOLE_URL
        unset GITHUB_REPOSITORY_OWNER
        unset GITHUB_REPOSITORY_NAME
        unset deploy_type
        SERVICE=$(basename $(dirname "${orders_file}"))
        unset GITHUB_URL
        unset GITHUB_REPOSITORY_OWNER
        unset GITHUB_REPOSITORY_NAME
        unset ROW
        unset ECS_SCHEDULED_TASK_CRON
        unset GDS_FQDN

        echo "Working on ${SERVICE}..."

        unset ECR_TAG
        unset ECR_REPO
        unset GITHUB_REPOSITORY_OWNER
        unset GITHUB_REPOSITORY_NAME
        if [ -z "$deploy_type" ] && egrep --silent '^dockerdeploy ' "${orders_file}"; then
          ECR_TAG=$(cat "${orders_file}" | egrep '^dockerdeploy ' | awk -F':' '{print $2;}')
          ECR_TAG=${ECR_TAG:-latest}
          ECR_REPO=$(cat "${orders_file}" | egrep '^dockerdeploy ' | awk '{print $2;}' | awk -F':' '{print $1;}')
          GITHUB_REPOSITORY_OWNER=$(echo "${ECR_REPO}" | perl -pe 's|github/(.*?)/.*?/.*|$1|')
          GITHUB_REPOSITORY_NAME=$(echo "${ECR_REPO}" | perl -pe 's|github/.*?/(.*?)/.*|$1|')
          GITHUB_BRANCH=$(echo "${ECR_REPO}" | perl -pe 's|github/.*?/.*?/(.*)|$1|')
          eval $(bash -c "cat \"${orders_file}\" | grep HEALTHCHECK")
          eval $(bash -c "cat \"${orders_file}\" | grep HEALTHCHECK_METHOD")
          HEALTHCHECK_METHOD=${HEALTHCHECK_METHOD:-"HEAD"}

          if [ -n "${ECR_REPO}" ]; then
            deploy_type="dockerdeploy"
            SERVICE_DIR_URL="https://github.com/${GITHUB_REPOSITORY_OWNER}/${GITHUB_REPOSITORY_NAME}/tree/${GITHUB_BRANCH}"
          fi

        fi

        eval $(bash -c "cat \"${orders_file}\" | grep GDS_FQDN")
        if [ -n "${GDS_FQDN}" ]; then
          echo "Retrieve prefix of GDS_FQDN"
          GDS_FQDN=$(echo "${GDS_FQDN}" | sed 's/\(^.*\)\.glginc.cn/\1/')
        fi
        HEALTHCHECK_URL="https://${CLUSTER_NAME}.glginc.cn/${SERVICE}${HEALTHCHECK}"
        [ -z "$deploy_type" ] && continue
        SERVICE_SUMO_DASHBOARD_URL="https://glgroup.sumologic.com/ui/dashboard.html?k=5a8FH5WEyve8ievoL7r8ev7TV3151y1vx1hK0xqzLLJMFvUJiESmk01bn2e5&f=&t=r&filters=service*eq*${SERVICE}**cluster*eq*${CLUSTER_NAME}"
        SERVICE_ECS_CONSOLE_URL="${ECS_CLUSTER_CONSOLE_URL}/${CLUSTER_VERSION}-${CLUSTER_NAME}_${SERVICE}/details"

        ROW="| [${SERVICE}](${SERVICE_DIR_URL}) | ${GDS_FQDN} | [Healthcheck](${HEALTHCHECK_URL}) | [Sumo Logic](${SERVICE_SUMO_DASHBOARD_URL}) | [ECS](${SERVICE_ECS_CONSOLE_URL}) | [Orders](https://github.com/${GITHUB_REPOSITORY}/blob/main/${SERVICE}/orders) | ![Health](https://access.glginc.cn/health-proxy/healthSVG?url=https://${CLUSTER_NAME}.glginc.cn/${SERVICE}${HEALTHCHECK}&method=${HEALTHCHECK_METHOD}) |"
        PUBLISHED_SERVICES+=("${ROW}")

      done
      [ ${#PUBLISHED_SERVICES[@]} -gt 0 ] && tee -a "$WIKI_HOME_PAGE" <<EOF

      ### Service Links

      _Note: Healthcheck status is cached if viewed in Github. Realtime status can be viewed [here][Cluster Directory]._

      [Cluster Directory]: https://wiki.glginc.cn/gds-china/1.3_Cluster-Directory.html

      | Service | FQDN Prefix | App Healthcheck | SumoLogic | ECS | Orders | Health |
      | --- | --- | --- | --- | --- | --- | --- |
      EOF
      for ((i = 0; i < ${#PUBLISHED_SERVICES[@]}; i++)); do
        echo "${PUBLISHED_SERVICES[$i]}" | tee -a "$WIKI_HOME_PAGE"
      done

      pushd "$WIKI_DIR" > /dev/null
      git config --local user.email "${{inputs.git_email}}"
      git config --local user.name "${{inputs.git_username}}"
      git add -A
      git commit -m "Links update" || true
      git push origin master
      popd > /dev/null
      pushd "$GDS_DIR" > /dev/null
      REPO_NAME=$(echo "${GITHUB_REPOSITORY}" | perl -pe 's|glg/||')
      cp $WIKI_HOME_PAGE ./clusterconfigs/$REPO_NAME
      git config --local user.email "${{inputs.git_email}}"
      git config --local user.name "${{inputs.git_username}}"
      git add -A
      git commit -m "Config update for ${REPO_NAME}" || true
      git push origin main
      popd > /dev/null
