name: "Generate Wiki Links"
description: "Generates a directory of services in the cluster in the repo's wiki"
inputs:
  gds_repo:
    description: "The Central GDS Cluster Directory repo, in org/repo format. e.g. glg/gds"
    required: true
  git_username:
    description: "git username to identify commits"
    required: true
  git_email:
    description: "email address for the git user to make commits with"
    required: true
runs:
  using: "composite"
  steps:
  - name: Generate Wiki Links
    shell: bash
    run: |
      pushd ./code > /dev/null
      ECS_REGION=us-east-1
      GITHUB_REMOTE="${{github.event.repository.ssh_url}}"
      GITHUB_WIKI_REMOTE=$(echo "${GITHUB_REMOTE}" | perl -pe 's|\.git$|\.wiki\.git|')
      WIKI_DIR="../wiki"
      WIKI_HOME_PAGE="$WIKI_DIR/Home.md"
      GITHUB_GDS_REMOTE="git@github.com:${{inputs.gds_repo}}.git"
      GDS_DIR="../gds"

      CLUSTER_NAME="$(echo "${{github.repository}}" | perl -pe 's|glg/gds.clusterconfig.||')"
      CLUSTER_FULLNAME="$(curl -s 'https://static.glgresearch.com/gds-cluster-map/cluster-map.json' | jq -r ".${CLUSTER_NAME}.clusterMap")"

      [ ! -d "${WIKI_DIR}" ] && git clone "${GITHUB_WIKI_REMOTE}" "${WIKI_DIR}"
      [ ! -d "${GDS_DIR}" ] && git clone "${GITHUB_GDS_REMOTE}" "${GDS_DIR}"
      # Generate Links to Sumo Dashboard per service
      # Generate Links to Sumo Dashboard per cluster

      ECS_CLUSTER_CONSOLE_URL="https://${ECS_REGION}.console.aws.amazon.com/ecs/v2/clusters/${CLUSTER_FULLNAME}/services?region=${ECS_REGION}"
      if [[ "${CLUSTER_NAME}" =~ ^j[0-9]+$ ]]; then
        CLUSTER_SUMO_DASHBOARD_URL="https://glgroup.us2.sumologic.com/ui/#/dashboardv2/hDMCqnSsQdMES9o2vQHuK1FV3NWM8yMWX0vnV4SZLBpXy7H3QyultRfmYULQ?variables=cluster:${CLUSTER_NAME}"
      else
        CLUSTER_SUMO_DASHBOARD_URL="https://glgroup.us2.sumologic.com/ui/#/dashboardv2/9qLxrGlVgzUOLOBjBNPBzHVfx7YXviJDUGVsMPQ7sbBQQjlg7EGxxmntThda?variables=cluster:${CLUSTER_NAME};service:*;region:*"
      fi
      CLUSTER_CONFIG_CODEPIPELINE_URL="https://console.aws.amazon.com/codesuite/codepipeline/pipelines/${CLUSTER_FULLNAME}-ccwatcher/view?region=us-east-1"
      tee "$WIKI_HOME_PAGE" <<EOF
      ### Cluster Links
      | Resource | Description |
      | --- | --- |
      | [Cluster Config Watcher](${CLUSTER_CONFIG_CODEPIPELINE_URL}) | This will take you to the AWS Codepipeline responsible for processing this Cluster Config. If changes to the environment do not seem to go out we might start looking here. |
      | [ECS Cluster](${ECS_CLUSTER_CONSOLE_URL}) | This takes you directly to the AWS ECS Cluster Dashboard |
      | [Sumo Cluster Dashboard](${CLUSTER_SUMO_DASHBOARD_URL}) | This a Sumo Logic log dashboard where you can view lots of information about this cluster. You can drill into each service using filters. |
      | [Cluster Config Repo](https://github.com/${{github.repository}}) | The Cluster Config repo on GitHub |
      EOF
      PUBLISHED_SERVICES=()
      UNPUBLISHED_SERVICES=()
      # Generate the links and table row for each service
      for orders_file in $(find . -maxdepth 2 -type f -name "orders" | sort); do
        unset SERVICE
        unset SERVICE_DIR_URL
        unset SERVICE_SUMO_DASHBOARD_URL
        unset SERVICE_BUILD_LOGS_URL
        unset SERVICE_ECS_CONSOLE_URL
        unset GITHUB_REPOSITORY_OWNER
        unset GITHUB_REPOSITORY_NAME
        unset deploy_type
        SERVICE=$(basename $(dirname "${orders_file}"))
        unset GITHUB_URL
        unset GITHUB_REPOSITORY_OWNER
        unset GITHUB_REPOSITORY_NAME
        unset ROW
        unset ECS_SCHEDULED_TASK_CRON
        if egrep --silent '^autodeploy ' "${orders_file}"; then
          GITHUB_URL=$(cat "${orders_file}" | egrep '^autodeploy ' | awk -F'#' '{print $1;}')
          GITHUB_BRANCH=$(cat "${orders_file}" | egrep '^autodeploy ' | awk -F'#' '{print $2;}')
          GITHUB_BRANCH=${GITHUB_BRANCH:-master}
          eval $(bash -c "cat \"${orders_file}\" | grep HEALTHCHECK")
          GITHUB_REPOSITORY_OWNER=$(echo "${GITHUB_URL}" | perl -pe 's|.*github\.com[:/](.*?)/.*|$1|')
          GITHUB_REPOSITORY_NAME=$(echo "${GITHUB_URL}" | perl -pe 's|.*github\.com[:/].*?/(.*)\.git|$1|')
          if [ -n "${GITHUB_REPOSITORY_OWNER}" ] \
          && [ -n "${GITHUB_REPOSITORY_NAME}" ]; then
            deploy_type="autodeploy"
            SERVICE_DIR_URL="https://github.com/${GITHUB_REPOSITORY_OWNER}/${GITHUB_REPOSITORY_NAME}/tree/${GITHUB_BRANCH}"
            SERVICE_BUILD_LOGS_URL="https://console.aws.amazon.com/codesuite/codepipeline/pipelines/${CLUSTER_FULLNAME}-${SERVICE}--${GITHUB_BRANCH}/view?region=us-east-1"
          fi
        fi
        unset ECR_TAG
        unset ECR_REPO
        unset GITHUB_REPOSITORY_OWNER
        unset GITHUB_REPOSITORY_NAME
        if [ -z "$deploy_type" ] && egrep --silent '^dockerdeploy ' "${orders_file}"; then
          ECR_TAG=$(cat "${orders_file}" | egrep '^dockerdeploy ' | awk -F':' '{print $2;}')
          ECR_TAG=${ECR_TAG:-latest}
          ECR_REPO=$(cat "${orders_file}" | egrep '^dockerdeploy ' | awk '{print $2;}' | awk -F':' '{print $1;}')
          GITHUB_REPOSITORY_OWNER=$(echo "${ECR_REPO}" | perl -pe 's|github/(.*?)/.*?/.*|$1|')
          GITHUB_REPOSITORY_NAME=$(echo "${ECR_REPO}" | perl -pe 's|github/.*?/(.*?)/.*|$1|')
          GITHUB_BRANCH=$(echo "${ECR_REPO}" | perl -pe 's|github/.*?/.*?/(.*)|$1|')
          eval $(bash -c "cat \"${orders_file}\" | grep HEALTHCHECK")
          eval $(bash -c "cat \"${orders_file}\" | grep HEALTHCHECK_METHOD")
          HEALTHCHECK_METHOD=${HEALTHCHECK_METHOD:-"HEAD"}
          if [ -n "${ECR_REPO}" ]; then
            deploy_type="dockerdeploy"
            SERVICE_DIR_URL="https://github.com/${GITHUB_REPOSITORY_OWNER}/${GITHUB_REPOSITORY_NAME}/tree/${GITHUB_BRANCH}"
            SERVICE_BUILD_LOGS_URL="https://github.com/${GITHUB_REPOSITORY_OWNER}/${GITHUB_REPOSITORY_NAME}/actions?query=workflow%3A\"Build+Image+and+Push+to+ECR\""
            SERVICE_DEPLOY_LOGS_URL="https://console.aws.amazon.com/codesuite/codepipeline/pipelines/${{ inputs.cluster_version}}-${{ inputs.cluster_name }}-${SERVICE}/view?region=${ECS_REGION}"
          fi
        fi
        if [ -z "$deploy_type" ] && egrep --silent '^jobdeploy ' "${orders_file}"; then
          ECR_TAG=$(cat "${orders_file}" | egrep '^jobdeploy ' | awk -F':' '{print $2;}')
          ECR_TAG=${ECR_TAG:-latest}
          ECR_REPO=$(cat "${orders_file}" | egrep '^jobdeploy ' | awk '{print $2;}' | awk -F':' '{print $1;}')
          GITHUB_REPOSITORY_OWNER=$(echo "${ECR_REPO}" | perl -pe 's|github/(.*?)/.*?/.*|$1|')
          GITHUB_REPOSITORY_NAME=$(echo "${ECR_REPO}" | perl -pe 's|github/.*?/(.*?)/.*|$1|')
          GITHUB_BRANCH=$(echo "${ECR_REPO}" | perl -pe 's|github/.*?/.*?/(.*)|$1|')
          eval "$(bash -c "cat \"${orders_file}\" | grep ECS_SCHEDULED_TASK_CRON")"
          ECS_SCHEDULED_TASK_CRON=${ECS_SCHEDULED_TASK_CRON:-"cron(* * * * ? *)"}
          if [ -n "${ECR_REPO}" ]; then
            deploy_type="jobdeploy"
            SERVICE_DIR_URL="https://github.com/${GITHUB_REPOSITORY_OWNER}/${GITHUB_REPOSITORY_NAME}/tree/${GITHUB_BRANCH}"
            SERVICE_BUILD_LOGS_URL="https://github.com/${GITHUB_REPOSITORY_OWNER}/${GITHUB_REPOSITORY_NAME}/actions?query=workflow%3A\"Build+Image+and+Push+to+ECR\""
            SERVICE_DEPLOY_LOGS_URL="https://console.aws.amazon.com/codesuite/codepipeline/pipelines/${{ inputs.cluster_version}}-${{ inputs.cluster_name }}-${SERVICE}/view?region=${ECS_REGION}"
          fi
        fi
        [ -z "$deploy_type" ] && continue
        SERVICE_SUMO_DASHBOARD_URL="https://glgroup.us2.sumologic.com/ui/dashboard.html?k=5a8FH5WEyve8ievoL7r8ev7TV3151y1vx1hK0xqzLLJMFvUJiESmk01bn2e5&f=&t=r&filters=service*eq*${SERVICE}**cluster*eq*${CLUSTER_NAME}"
        SERVICE_ECS_CONSOLE_URL="https://${ECS_REGION}.console.aws.amazon.com/ecs/v2/clusters/${CLUSTER_NAME}/services/${CLUSTER_FULLNAME}_${SERVICE}/health?region=${ECS_REGION}"
        if egrep --silent '^unpublished' "${orders_file}"; then
          ROW="| [${SERVICE}](${SERVICE_DIR_URL}) | [Deploy Logs](${SERVICE_BUILD_LOGS_URL}) | [Sumo Logic](${SERVICE_SUMO_DASHBOARD_URL}) | [ECS](${SERVICE_ECS_CONSOLE_URL}) | [Orders](https://github.com/${GITHUB_REPOSITORY}/blob/main/${SERVICE}/orders) | [deprecated](https://services.glgresearch.com/know/glg-deployment-system-gds/scheduled-jobs/#command-autodeploy) |"
          UNPUBLISHED_SERVICES+=("${ROW}")
          continue
        fi

        if [ "$deploy_type" = "jobdeploy" ]; then
          SERVICE_SUMO_DASHBOARD_URL="https://glgroup.us2.sumologic.com/ui/#/dashboardv2/qMMQ1yVnQqhrKnP55NI7AzdKmjQC7pXPXf1ETYUq3RP0ofxd75qSj4jgSM1D?variables=service:${SERVICE};cluster:${CLUSTER_NAME}"
          SERVICE_ECS_CONSOLE_URL="https://${ECS_REGION}.console.aws.amazon.com/ecs/v2/clusters/${CLUSTER_FULLNAME}/scheduled-tasks/${CLUSTER_FULLNAME}-${SERVICE}-scheduled-task-event-rule?region=${ECS_REGION}"
          ROW="| [${SERVICE}](${SERVICE_DIR_URL}) | [Deploy Logs](${SERVICE_BUILD_LOGS_URL}) | [Sumo Logic](${SERVICE_SUMO_DASHBOARD_URL}) | [ECS](${SERVICE_ECS_CONSOLE_URL}) | [Orders](https://github.com/${GITHUB_REPOSITORY}/blob/main/${SERVICE}/orders) | ${ECS_SCHEDULED_TASK_CRON} |"
          UNPUBLISHED_SERVICES+=("${ROW}")
          continue
        fi

        ROW="| [${SERVICE}](${SERVICE_DIR_URL}) | [Healthcheck](https://${CLUSTER_NAME}.glgresearch.com/${SERVICE}${HEALTHCHECK}) | [Deploy Logs](${SERVICE_BUILD_LOGS_URL}) | [Sumo Logic](${SERVICE_SUMO_DASHBOARD_URL}) | [ECS](${SERVICE_ECS_CONSOLE_URL}) | [Orders](https://github.com/${GITHUB_REPOSITORY}/blob/main/${SERVICE}/orders) | ![Health](https://access.glgresearch.com/health-proxy/healthSVG?url=https://${CLUSTER_NAME}.glgresearch.com/${SERVICE}${HEALTHCHECK}&method=${HEALTHCHECK_METHOD}) |"
        PUBLISHED_SERVICES+=("${ROW}")

      done
      [ ${#PUBLISHED_SERVICES[@]} -gt 0 ] && tee -a "$WIKI_HOME_PAGE" <<EOF

      ### Service Links

      _Note: Healthcheck status is cached if viewed in Github. Realtime status can be viewed [here][Cluster Directory]._

      [Cluster Directory]: https://services.glgresearch.com/know/glg-deployment-system-gds/cluster-directory/

      | Service | App Healthcheck | Deploy Logs | SumoLogic | ECS | Orders | Health |
      | --- | --- | --- | --- | --- | --- | --- |
      EOF
      for ((i = 0; i < ${#PUBLISHED_SERVICES[@]}; i++)); do
        echo "${PUBLISHED_SERVICES[$i]}" | tee -a "$WIKI_HOME_PAGE"
      done

      [ ${#UNPUBLISHED_SERVICES[@]} -gt 0 ] && tee -a "$WIKI_HOME_PAGE" <<EOF

      ### Jobs
      | Service | Deploy Logs | SumoLogic | ECS | Orders | Schedule |
      | --- | --- | --- | --- | --- | --- |
      EOF
      for ((i = 0; i < ${#UNPUBLISHED_SERVICES[@]}; i++)); do
        echo "${UNPUBLISHED_SERVICES[$i]}" | tee -a "$WIKI_HOME_PAGE"
      done

      pushd "$WIKI_DIR" > /dev/null
      git config --local user.email "${{inputs.git_email}}"
      git config --local user.name "${{inputs.git_username}}"
      git add -A
      git commit -m "Links update" || true
      git push origin master
      popd > /dev/null
      pushd "$GDS_DIR" > /dev/null
      REPO_NAME=$(echo "${GITHUB_REPOSITORY}" | perl -pe 's|glg/||')
      cp $WIKI_HOME_PAGE ./clusterconfigs/$REPO_NAME
      git config --local user.email "${{inputs.git_email}}"
      git config --local user.name "${{inputs.git_username}}"
      git add -A
      git commit -m "Config update for ${REPO_NAME}" || true
      git push origin main
      popd > /dev/null
